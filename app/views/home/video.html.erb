<video id="my-video" width="400px" autoplay muted playsinline></video>
    <button id="peer_request">idをください</button>
    <button id="end-call">切断</button>
    <p id="my-id"></p>
    <textarea id="their-id"></textarea>
    <button id="make-call">発信</button>
    <video id="their-video" width="400px" autoplay muted playsinline></video>
    <%= yield %>
    <script>//これらはloadしたときに発火
      let localStream;

      // カメラ映像取得
      navigator.mediaDevices.getUserMedia({video: true, audio: true}) //カメラからの映像をストリームとして持ってくる
      .then( function(stream) {   //関数の中に関数 streamはカメラ映像
        // 成功時にvideo要素にカメラ映像をセットし、再生
        const videoElm = document.getElementById('my-video') //video要素を取得
        videoElm.srcObject = stream; //srcObjectはその動画のソースを表している
        videoElm.play();
        //console.log(videoElm.srcObject)
        //videoElm.srcObject;
        // 着信時に相手にカメラ映像を返せるように、グローバル変数に保存しておく
        localStream = stream;
        //alert(localStream);
      }).catch( error => { //カメラが存在しない時や許可しない時
        // 失敗時にはエラーログを出力
        alert("表示できませーん");
        console.error('mediaDevice.getUserMedia() error:', error);
        return;
      });
      
      
      // var myFunc = function(name) {
      //   console.log(name);
      // }
      // myFunc("fdasfasfasfads")
      //////thenの説明
      //.then(function(value) {
      //   // 非同期処理が成功した場合
      //   console.log('実行結果:' + value); // => 実行結果:成功!
      // })
      // .catch(function(value) {
      //   // 非同期処理が失敗した場合
      //   console.log('実行結果:' + value); // 呼ばれない
      // });





      const peer = new Peer({ //Peerはskywayが作ったオブジェクト(もの, 設計図, 関数) 
        key: gon.skyway_key, //apiキー peerとは通信拠点
        debug: 3
      });
      //この記述は普通は　var sample = new Function('text', 'console.log(text)');　第1引数に引数名　第2引数に処理の内容  と似ているが違う
      //今回はhead要素ないでskywayを読み込んでいるのでPeerを使える Peerという関数はskyway側で定義されている 中身は引数 peerという新しいオブジェクト インスタンス(設計図から作られたもの)を作っている
      //例
      //function car(make, model, year) {
          //this.make = make;
          //this.model = model;
          //this.year = year;
        //}
      //mycar = new car("Eagle", "Talon TSi", 1993);

      

      // peer.on('open', () => {
      //   document.getElementById('my-id').textContent = peer.id;
      // });

      document.getElementById('peer_request').onclick = () => {  //peerのidを取得
        //peer.open;
        document.getElementById('my-id').textContent = peer.id;
      };

      // 発信処理
        document.getElementById('make-call').onclick = () => {
          const theirID = document.getElementById('their-id').value;
          const mediaConnectio = peer.call(theirID, localStream); //相手に発信 callの説明は下に書いてある peerをよびだし peerはtheirIDに対して処理をする localStream(自分のカメラ映像)は引数
          //alert(localStream);
          setEventListener(mediaConnectio);
        };

        //着信処理 着信すると発火
        peer.on('call', mediaConnectio => {
          mediaConnectio.answer(localStream);
          setEventListener(mediaConnectio);
        });

      // イベントリスナを設置する関数
        const setEventListener = mediaConnection => { //mediaConnectionは引数
          mediaConnection.on('stream', stream => { //ストリーミングでは、ネットワーク経由で受信するリソースを小さなチャンクに分割し、少しずつ処理します。
            //streamしたらfunction(stream)発火 streamにはmediaConnectionが入っている
            //$("#token_submit").on("click", function(e) {
                // e.preventDefault();
            //});と同じ
            // video要素にカメラ映像をセットして再生
            const videoElm = document.getElementById('their-video')
            videoElm.srcObject = stream;
            videoElm.play();
          });
        }

      

      // document.getElementById('end-call').onclick = () => {
      //   mediaConnection.close
      // };


      peer.on('error', err => {
        alert(err.message);
        alert("バーカ接続できねよ");
      });

      peer.on('close', () => {
        alert('通信が切断しました。');
        console.log("通信きれた");
      });



      var list = function() {
        for (var i = 0; i < arguments.length; i++) { //argumentsは引数
          console.log(arguments[i]);
        };
      };
      var args = [1,2,3,4,5];
      list.apply(window, args);   //関数名.apply(関数の処理の対象となる要素,関数で使う引数(配列のみ) );
                                  //arguments は配列風Array-likeオブジェクトであり、関数に渡された引数の値を含んでおり、関数内からアクセスすることができます。


      var practice = function(argument) {
        console.log(argument);
      };
      practice("fasf");
      var aaa = "fdafas"
      practice.call(window, aaa)                         //関数名.call(関数の処理の対象となる要素,関数で使う引数,関数で使う引数,関数で使う引数… );
    </script>